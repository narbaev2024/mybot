import telebot
from datetime import datetime, timedelta
import psycopg2
import pytz
import logging
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

logging.basicConfig(level=logging.INFO)

timezone = pytz.timezone('Asia/Bishkek')

API_TOKEN = '7370432818:AAELlwGFnwnq0J7flE1gZsDhyG3wnJRuaCY'
bot = telebot.TeleBot(API_TOKEN)

# PostgreSQL connection
conn = psycopg2.connect(
    dbname='keybot',
    user='postgres',
    password='adminadmin',
    host='localhost',
    port='5432'
)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS certificates (
        id SERIAL PRIMARY KEY,
        user_id INTEGER,
        user_name TEXT,
        certificate_name TEXT,
        certificate_key TEXT,
        expiration_date TIMESTAMP
    );
''')
conn.commit()

user_states = {}

@bot.message_handler(commands=['start'])
def start_command(message):
    show_menu(message)

def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_add = types.KeyboardButton("/add")
    button_remove = types.KeyboardButton("/remove")
    button_check = types.KeyboardButton("/certificate")
    button_update = types.KeyboardButton("/update")
    button_help = types.KeyboardButton("/help")
    markup.add(button_add, button_remove, button_check, button_update, button_help)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)

def cancel_keyboard():
    markup = types.InlineKeyboardMarkup()
    button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(button_cancel)
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_command(call):
    user_id = call.from_user.id
    if user_id in user_states:
        del user_states[user_id]
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        bot.send_message(user_id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        bot.answer_callback_query(call.id, "üîÑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@bot.message_handler(commands=['add'])
def start_add_certificate(message):
    user_states[message.from_user.id] = {'step': 1}
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", reply_markup=cancel_keyboard())

@bot.message_handler(commands=['remove'])
def remove_certificate(message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
        bot.reply_to(message, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")
        return
    if len(message.text.split()) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞>")
        return
    name = message.text.split(maxsplit=1)[1].strip('"')
    cursor.execute("DELETE FROM certificates WHERE user_id = %s AND certificate_name = %s", (user_id, name))
    conn.commit()
    if cursor.rowcount > 0:
        bot.reply_to(message, f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{name}'* —É–¥–∞–ª–µ–Ω.")
    else:
        bot.reply_to(message, f"üö´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{name}'* –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['update'])
def start_update_certificate(message):
    user_states[message.from_user.id] = {'step': 1, 'update': True}
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", reply_markup=cancel_keyboard())

@bot.message_handler(func=lambda message: message.from_user.id in user_states)
def handle_add_or_update_certificate_input(message):
    user_id = message.from_user.id
    step = user_states[user_id]['step']

    if step == 1:
        if message.text.startswith('"') and message.text.endswith('"'):
            certificate_name = message.text.strip('"')
            user_states[user_id]['certificate_name'] = certificate_name

            if 'update' in user_states[user_id]:
                user_states[user_id]['step'] = 2
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:MM:",
                             reply_markup=cancel_keyboard())
            else:
                user_states[user_id]['step'] = 2
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö:", reply_markup=cancel_keyboard())
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.")

    elif step == 2:
        if 'update' in user_states[user_id]:
            try:
                expiration_date = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
                certificate_name = user_states[user_id]['certificate_name']
                update_certificate(user_id, certificate_name, expiration_date)
                bot.reply_to(message, f"‚úÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ *'{certificate_name}'* –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            except ValueError:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:MM.")
            finally:
                del user_states[user_id]
        else:
            if message.text.startswith('"') and message.text.endswith('"'):
                user_states[user_id]['certificate_key'] = message.text.strip('"')
                user_states[user_id]['step'] = 3
                bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:MM:",
                             reply_markup=cancel_keyboard())
            else:
                bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö.")

    elif step == 3:
        try:
            expiration_date = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
            add_certificate(user_id, message.from_user.full_name, user_states[user_id]['certificate_name'],
                            user_states[user_id]['certificate_key'], expiration_date)
            bot.reply_to(message, f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{user_states[user_id]['certificate_name']}'* –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:MM.")
        finally:
            del user_states[user_id]

def add_certificate(user_id, user_name, certificate_name, certificate_key, expiration_date):
    cursor.execute(
        "INSERT INTO certificates (user_id, user_name, certificate_name, certificate_key, expiration_date) VALUES (%s, %s, %s, %s, %s)",
        (user_id, user_name, certificate_name, certificate_key, expiration_date))
    conn.commit()

def update_certificate(user_id, certificate_name, expiration_date):
    cursor.execute("UPDATE certificates SET expiration_date = %s WHERE user_id = %s AND certificate_name = %s",
                   (expiration_date, user_id, certificate_name))
    conn.commit()

@bot.message_handler(commands=['certificate'])
def check_certificates(message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã.")

    try:
        cursor.execute("SELECT certificate_name, certificate_key, expiration_date FROM certificates WHERE user_id = %s",
                       (message.from_user.id,))
        rows = cursor.fetchall()
    except psycopg2.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
        return

    if rows:
        response = "*–í–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:*\n"
        for name, certificate_key, expiration_date in rows:
            response += f"üîñ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: *\"{name}\"*\nüîë –ö–ª—é—á: \"{certificate_key}\"\nüìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiration_date}\n\n"
    else:
        response = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."

    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                          "/remove - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                          "/certificate - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
                          "/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
                          "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
                 parse_mode='Markdown')

def send_reminders():
    current_time = datetime.now(timezone)
    threshold_time = current_time + timedelta(days=1)

    cursor.execute("SELECT user_id, certificate_name, expiration_date FROM certificates WHERE expiration_date <= %s",
                   (threshold_time,))
    rows = cursor.fetchall()

    for user_id, certificate_name, expiration_date in rows:
        bot.send_message(user_id,
                         f"üîî –í–Ω–∏–º–∞–Ω–∏–µ: —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç *'{certificate_name}'* –∏—Å—Ç–µ–∫–∞–µ—Ç {expiration_date}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ!")

scheduler = BackgroundScheduler()
scheduler.add_job(send_reminders, 'interval', minutes=15)
scheduler.start()

try:
    bot.polling(none_stop=True)
except KeyboardInterrupt:
    scheduler.shutdown()
    cursor.close()
    conn.close()

